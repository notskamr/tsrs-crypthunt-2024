---
import MainLayout from "@/layouts/MainLayout.astro";

import { db } from "@/db";
const { id: rawId } = Astro.params;

if (!rawId) {
  return new Response(null, {
    status: 400,
  });
}
const id = Number(rawId);
if (isNaN(id)) {
  return new Response(null, {
    status: 400,
  });
}

const team = await db.query.teams.findFirst({
  where: (team, { eq }) => eq(team.id, id),
  with: {
    responses: {
      orderBy: (response, { desc }) => desc(response.createdAt),
      limit: 1,
    },
  },
});

if (!team) {
  return new Response(null, {
    status: 404,
  });
}

interface DisplayData {
  label: string;
  value: string;
  href?: string;
  customClasses?: string;
}

const displayData: DisplayData[] = [
  {
    label: "ID",
    value: team.id.toString(),
  },
  {
    label: "Name",
    value: team.name,
    customClasses: "capitalize",
  },
  {
    label: "Points",
    value: team.points.toString(),
  },
  {
    label: "Current Question",
    value: team.currentQuestionId,
    href: `/admin/questions/${team.currentQuestionId}/edit`,
  },
  {
    label: "Level Up Time",
    value: team?.levelUpTime?.toLocaleString() || "N/A",
  },
  {
    label: "Banned Until",
    value: team?.bannedUntil?.toLocaleString() || "N/A",
  },
  {
    label: "Has Finished",
    value: team.hasFinished ? "Yes" : "No",
  },
  {
    label: "Latest Response Time",
    value: team?.responses[0]?.createdAt.toLocaleString() || "N/A",
  },
];
---

<MainLayout title={`Crypt Hunt - Admin - Team (${team.id})`}>
  <div
    class="w-full max-w-xl mx-auto flex flex-col items-center mt-8 mb-4 relative"
  >
    <team-meta data-team-id={team.id} class="hidden" hidden aria-hidden="true"
    ></team-meta>
    <a
      href="/admin/teams"
      class="sm:absolute top-2 left-0 text-blue-500 dark:text-blue-400 hover:underline text-lg"
      >See Teams</a
    >
    <h1 class="text-4xl font-semibold">View Team</h1>
    <div class="w-full mt-8 text-center grid grid-cols-1 sm:text-lg">
      {
        displayData.map(({ label, value, href, customClasses }) => (
          <div
            onclick={`${href ? `window.location.href = "${href}"` : ""}`}
            class:list={[
              "flex justify-between p-4 gap-3 border-b border-neutral-700 hover:bg-black/5 dark:hover:bg-white/5",
              href ? "cursor-pointer" : undefined,
              customClasses,
            ]}
          >
            <span class="font-semibold">{label}</span>
            <span class="max-w-[14rem] overflow-x-auto text-right">
              {value}
            </span>
          </div>
        ))
      }
    </div>
    <div class="flex gap-4 mt-8">
      <a href={`/admin/users?teamId=${team.id}`} class="btn important">
        All Users
      </a>
      <a href={`/admin/responses?teamId=${team.id}`} class="btn important">
        All Responses
      </a>
    </div>
    <div class="flex gap-4 mt-4">
      <a href={`/admin/teams/${id}/edit`} class="btn default"> Edit </a>
    </div>
  </div>
  <style>
    .btn {
      @apply py-2 px-4 rounded-tl-md rounded-br-md duration-150 border border-neutral-700;
    }

    .default {
      @apply bg-black text-white dark:bg-white hover:invert dark:text-black;
    }

    .important {
      @apply bg-blue-500 text-white hover:brightness-110;
    }

    .danger {
      @apply bg-red-500 text-white hover:saturate-150;
    }
  </style>
</MainLayout>
