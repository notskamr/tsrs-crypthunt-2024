---
import MainLayout from "@/layouts/MainLayout.astro";
import { Question } from "@/utils/models/Question";
import { markdownToPlainText } from "@/utils/misc";

const questions = await Question.all();

questions.forEach((question) => {
  question.content = markdownToPlainText(question.content);
});

const questionTypeColors = {
  online: "bg-green-500",
  offline: "bg-yellow-500",
};
// console.log(questions);
---

<MainLayout title="Crypt Hunt - Admin - Questions">
  <div
    class="w-full max-w-3xl mx-auto flex flex-col items-center mt-8 mb-4 relative"
  >
    <a
      href="/admin"
      class="sm:absolute top-2 left-0 text-blue-500 dark:text-blue-400 hover:underline text-lg"
      >See Admin</a
    >
    <h1 class="text-4xl font-semibold">Questions</h1>
    <div class="mt-4 w-full flex flex-col">
      <div class="flex gap-2 self-end text-lg">
        <a href="/admin/questions/new" class="btn important"
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            width="1em"
            height="1em"
            viewBox="0 0 100 100"
            ><rect width="100" height="100" fill="none"></rect><path
              fill="currentColor"
              d="M84.437 39.721H60.273V15.563a1.814 1.814 0 0 0-1.812-1.813H41.536a1.813 1.813 0 0 0-1.812 1.813l-.001 24.16l-24.159-.001c-.961 0-1.812.851-1.813 1.813V58.46a1.81 1.81 0 0 0 1.813 1.812h24.16v24.165a1.814 1.814 0 0 0 1.813 1.813H58.46a1.813 1.813 0 0 0 1.813-1.813V60.273l24.163-.001a1.81 1.81 0 0 0 1.813-1.813l.001-16.925a1.813 1.813 0 0 0-1.813-1.813"
            ></path></svg
          ></a
        >
        <button id="normalize" type="submit" class="btn default"
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            width="1em"
            height="1em"
            viewBox="0 0 24 24"
            ><rect width="24" height="24" fill="none"></rect><path
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              d="M16 6h-5v5H6v5H1v7h22V1h-7z"></path></svg
          ></button
        >
      </div>
      <div class="mt-2 sm:mt-6 w-full">
        <ul class="grid grid-cols-1 gap-4 w-full text-sm sm:text-base">
          {
            questions.map((question) => (
              <li
                class="rounded-md flex flex-row w-full gap-2 items-center h-16"
                id={`question-${question.id}`}
              >
                <h2 class="text-xl font-semibold self-start mr-4 text-center flex items-center h-full">
                  {question.position}
                </h2>
                <p class="grow-[1] h-full flex sm:items-center overflow-y-auto">
                  {question.title ? question.title + " - " : ""}
                  {question.content.length > 50
                    ? question.content.substring(0, 50) + "..."
                    : question.content || "---"}
                </p>
                <div class="h-full flex gap-2 items-center">
                  <div
                    class:list={[
                      "w-4 h-4 rounded-full mr-2",
                      questionTypeColors[question.type],
                    ]}
                  />
                  <a
                    class="btn default text-lg"
                    href={`/admin/preview?questionId=${question.id}`}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="1em"
                      height="1em"
                      viewBox="0 0 24 24"
                    >
                      <path
                        fill="currentColor"
                        d="M12 9a3 3 0 0 0-3 3a3 3 0 0 0 3 3a3 3 0 0 0 3-3a3 3 0 0 0-3-3m0 8a5 5 0 0 1-5-5a5 5 0 0 1 5-5a5 5 0 0 1 5 5a5 5 0 0 1-5 5m0-12.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5"
                      />
                    </svg>
                  </a>
                  <a
                    href={`/admin/questions/${question.id}/edit`}
                    class="btn default text-lg"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="1em"
                      height="1em"
                      viewBox="0 0 24 24"
                    >
                      <path
                        fill="currentColor"
                        d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"
                      />
                    </svg>
                  </a>
                  <button
                    data-id={question.id}
                    class="delete btn danger text-lg"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="1em"
                      height="1em"
                      viewBox="0 0 24 24"
                    >
                      <path
                        fill="currentColor"
                        d="M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7H6z"
                      />
                    </svg>
                  </button>
                </div>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  const deleteButtons = document.querySelectorAll<HTMLButtonElement>(".delete");

  deleteButtons.forEach((button) => {
    button.addEventListener("click", async () => {
      if (!confirm("Are you sure you want to delete this question?")) return;
      const id = button.dataset.id;
      const response = await fetch(`/api/admin/questions/${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        window.location.reload();
      } else {
        alert("Failed to delete question");
      }
    });
  });

  const normalizeButton = document.getElementById(
    "normalize"
  ) as HTMLButtonElement;
  normalizeButton.addEventListener("click", async () => {
    if (
      !confirm(
        "Are you sure you want to normalize the positions of all questions?"
      )
    )
      return;

    normalizeButton.disabled = true;
    const response = await fetch(`/api/admin/normalize-questions`, {
      method: "POST",
    });

    if (response.ok) {
      alert("Questions normalized successfully");
      window.location.reload();
    } else {
      alert("Failed to normalize questions");
    }

    normalizeButton.disabled = false;
  });
</script>
<style>
  .btn {
    @apply py-2 px-4 rounded-tl-md rounded-br-md duration-150 border border-neutral-700;
  }

  .default {
    @apply bg-black text-white dark:bg-white hover:invert dark:text-black;
  }

  .important {
    @apply bg-blue-500 text-white hover:brightness-110;
  }

  .danger {
    @apply bg-red-500 text-white hover:saturate-150;
  }
</style>
