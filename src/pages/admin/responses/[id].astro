---
import MainLayout from "@/layouts/MainLayout.astro";

import { db } from "@/db";
import { titleCase } from "@/utils/misc";
let { id: rawId } = Astro.params;
if (!rawId) {
  return new Response(null, {
    status: 400,
  });
}
const id = Number(rawId);

if (isNaN(id) || !id) {
  return new Response(null, {
    status: 400,
  });
}

const response = await db.query.questionResponses.findFirst({
  where: (questionResponses, { eq }) => eq(questionResponses.id, id),
  with: {
    user: true,
    team: true,
  },
});

if (!response) {
  return new Response(null, {
    status: 404,
  });
}

interface DisplayData {
  label: string;
  value: string;
  href?: string;
}

const displayData: DisplayData[] = [
  {
    label: "ID",
    value: response.id.toString(),
  },
  {
    label: "User",
    value: response?.user?.username || "Unknown",
    href: response?.user ? `/admin/users/${response.user.id}` : undefined,
  },
  {
    label: "Team",
    value: response?.team?.name ? titleCase(response.team.name) : "Unknown",
    href: response.team ? `/admin/teams/${response.team.id}` : undefined,
  },
  {
    label: "Question ID",
    value: response.questionId.toString(),
    href: `/admin/questions/${response.questionId}/edit`,
  },
  {
    label: "Response",
    value: response.response,
  },
  {
    label: "Correct",
    value: response.isCorrect ? "Yes" : "No",
  },
  {
    label: "Created At",
    value: response.createdAt.toLocaleString(),
  },
];
---

<MainLayout title={`Crypt Hunt - Admin - Response (${response.id})`}>
  <div
    class="w-full max-w-xl mx-auto flex flex-col items-center mt-8 mb-4 relative"
  >
    <a
      href="/admin/responses"
      class="sm:absolute top-2 left-0 text-blue-500 dark:text-blue-400 hover:underline text-lg"
      >See Responses</a
    >
    <h1 class="text-4xl font-semibold">View Response</h1>
    <div class="w-full mt-8 text-center grid grid-cols-1 text-lg">
      {
        displayData.map(({ label, value, href }) => (
          <div
            onclick={`${href ? `window.location.href = "${href}"` : ""}`}
            class:list={[
              "flex justify-between p-4 border-b border-neutral-700 hover:bg-black/5 dark:hover:bg-white/5",
              href ? "cursor-pointer" : undefined,
            ]}
          >
            <span class="font-semibold">{label}</span>
            <span>{value}</span>
          </div>
        ))
      }
    </div>
  </div>

  <style>
    .btn {
      @apply py-2 px-4 rounded-tl-md rounded-br-md duration-150 border border-neutral-700;
    }

    .default {
      @apply bg-black text-white dark:bg-white hover:invert dark:text-black;
    }

    .important {
      @apply bg-blue-500 text-white hover:brightness-110;
    }

    .danger {
      @apply bg-red-500 text-white hover:saturate-150;
    }
  </style>
</MainLayout>
