---
import MainLayout from "@/layouts/MainLayout.astro";
import { kv } from "@/utils/kv";

const { user, session } = Astro.locals;

if (!session || !user) {
  return Astro.redirect("/admin/login");
}

let { "ch:paused": _paused, "ch:started": _hasStarted } = await kv.getMultiple([
  "ch:paused",
  `ch:started`,
]);
const paused = _paused === "1";
const hasStarted = _hasStarted === "1";
---

<MainLayout title="Crypt Hunt - Admin">
  <div class="w-full mx-auto">
    <h1 class="text-4xl font-bold text-center mt-8">Admin Dashboard</h1>
    <div class="mt-8 text-center">
      <h2 class="text-2xl font-bold capitalize">Welcome, {user.username}</h2>
      <p class="text-lg">You are logged in as an admin.</p>
    </div>
    <section
      id="actions"
      class="flex flex-col sm:flex-row w-full justify-between max-w-xl mt-8 mx-auto gap-3"
    >
      <div>
        <h2 class="text-2xl font-bold">Manage</h2>
        <ul class="mt-1">
          <li class="text-lg">
            <a href="/admin/questions" class="text-blue-500 hover:underline"
              >Questions</a
            >
          </li>
          <li class="text-lg">
            <a href="/admin/responses" class="text-blue-500 hover:underline"
              >Responses</a
            >
          </li>
          <li class="text-lg">
            <a href="/admin/users" class="text-blue-500 hover:underline"
              >Users</a
            >
          </li>
          <li class="text-lg">
            <a href="/admin/teams" class="text-blue-500 hover:underline"
              >Teams</a
            >
          </li>
          <li class="text-lg">
            <a href="/admin/sessions" class="text-blue-500 hover:underline"
              >Sessions</a
            >
          </li>
          <li class="text-lg">
            <a href="/admin/logs" class="text-blue-500 hover:underline"
              >Logs</a
            >
          </li>
        </ul>
      </div>
      <div id="toggles">
        <h2 class="text-2xl font-bold">General</h2>
        <ul class="mt-1">
          <li class="text-lg">
            <a href="/admin/preview" class="text-blue-500 hover:underline"
              >Preview As Team</a
            >
          </li>
        </ul>
        <div class="mt-4">
          <h3 class="text-lg font-bold">Toggle Features</h3>
          <div
            class="flex flex-col gap-2 mt-2 select-none max-w-xs w-fit"
            id="toggles"
          >
            <label
              for="start-game"
              class="flex items-center gap-4 justify-between text-green-500"
            >
              <input
                type="checkbox"
                id="start-game"
                autocomplete="off"
                name="start-game"
                class="form-checkbox h-5 w-5 text-blue-600"
                checked={hasStarted}
              />
              <span>Game Started</span>
            </label>
            <label
              for="pause-game"
              class="flex items-center gap-4 justify-between text-red-500"
            >
              <input
                type="checkbox"
                id="pause-game"
                autocomplete="off"
                name="pause-game"
                class="form-checkbox h-5 w-5 text-blue-600"
                checked={paused}
              />
              <span>Game Paused</span>
            </label>
          </div>
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  interface Toggle {
    element: HTMLInputElement;
    onchange: (e: Event) => Promise<void>;
  }

  const toggles: Toggle[] = [
    {
      element: document.getElementById("start-game") as HTMLInputElement,
      onchange: async (e) => {
        if (
          (e.target as HTMLInputElement).checked &&
          !confirm("Are you sure you want to start the game?")
        ) {
          (e.target as HTMLInputElement).checked = false;
          e.preventDefault();
          return;
        }
        // disable the toggle button
        (e.target as HTMLInputElement).disabled = true;
        const res = await fetch("/api/admin/toggle", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            started: Boolean((e.target as HTMLInputElement).checked),
          }),
        });

        if (res.ok) {
          console.log("Game Started");
        } else {
          alert("Failed to start the game");
        }
        // enable the toggle button
        (e.target as HTMLInputElement).disabled = false;
      },
    },
    {
      element: document.getElementById("pause-game") as HTMLInputElement,
      onchange: async (e) => {
        if (
          (e.target as HTMLInputElement).checked &&
          !confirm("Are you sure you want to pause the game?")
        ) {
          (e.target as HTMLInputElement).checked = false;
          e.preventDefault();
          return;
        }
        // disable the toggle button
        (e.target as HTMLInputElement).disabled = true;
        const res = await fetch("/api/admin/toggle", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            paused: Boolean((e.target as HTMLInputElement).checked),
          }),
        });

        if (res.ok) {
          console.log("Game Paused");
        } else {
          alert("Failed to pause the game");
        }
        // enable the toggle button
        (e.target as HTMLInputElement).disabled = false;
      },
    },
  ];

  toggles.forEach((toggle) => {
    toggle.element.addEventListener("change", toggle.onchange);
  });
</script>
